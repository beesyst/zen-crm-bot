x-app-image: &app_image zencrm-app:${PYTHON_VERSION}-${PYTHON_DEBIAN}-${NODE_VERSION}

x-app-build: &app_build
  context: ..
  dockerfile: docker/Dockerfile
  target: runtime
  args:
    PYTHON_VERSION: ${PYTHON_VERSION}
    PYTHON_DEBIAN: ${PYTHON_DEBIAN}
    NODE_VERSION: ${NODE_VERSION}

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: runtime
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
        PYTHON_DEBIAN: ${PYTHON_DEBIAN}
        NODE_VERSION: ${NODE_VERSION}
    image: *app_image
    network_mode: host
    env_file: [../.env]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
      - ../storage:/app/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 10
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  worker:
    image: *app_image
    build: *app_build
    network_mode: host
    env_file: [../.env]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
      - ../storage:/app/storage
    restart: unless-stopped
    command: ["celery", "-A", "worker.tasks", "worker", "--loglevel=INFO"]

  beat:
    image: *app_image
    build: *app_build
    network_mode: host
    env_file: [../.env]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
      - ../storage:/app/storage
      - ../storage/celery:/app/storage/celery
    restart: unless-stopped
    command:
      [
        "celery",
        "-A",
        "worker.tasks",
        "beat",
        "--loglevel=INFO",
        "--schedule",
        "/app/storage/celery/celerybeat-schedule",
      ]

  job:
    image: *app_image
    build: *app_build
    network_mode: host
    env_file: [../.env]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
      - ../storage:/app/storage

  redis:
    image: ${REDIS_IMAGE}
    pull_policy: missing
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  db:
    image: ${POSTGRES_IMAGE}
    pull_policy: missing
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kommo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kommo}
      POSTGRES_DB: ${POSTGRES_DB:-kommo}
    ports: ["5432:5432"]
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-kommo} -d ${POSTGRES_DB:-kommo}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

volumes:
  db_data:
